/*
  –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑–º–µ—Ä–µ–Ω–∏–π
  –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö
*/
export const getUniqueValues = (
  data, dims, isMetricsInCols, metrics, subtotalsOn, extra, forCols
) => {  
  let uniqueCols = []
  dims.forEach((dim, i) => {
    const newAr = data.map((item) => {
      return item[dim] === undefined ? 'subtotal' : item[dim]
    }).sort((a,b) => {
      if (typeof a === 'string') {
        return a.localeCompare(b)
      } else {
        return a-b
      }
    }).sort((a, b) => { // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–± subtotal –≤—Å–µ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º
      if (b === 'subtotal') {return -1}
    })
    const unique = [...new Set(newAr)] // —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    if (unique.length === 1 && unique[0] !== undefined) {
      uniqueCols.push(unique ? [unique] : ['null']) // –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü –æ–¥–∏–Ω - –Ω—É–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –µ–≥–æ –∫–∞–∫ unique=[[values]], –∏–Ω–∞—á–µ –±—É–¥–µ—Ç unique=[values]
      return 
    }
    uniqueCols.push(unique ? unique : 'null')
  })
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
  // –§—É–Ω–∫—Ü–∏—è getUniqueValues –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ä–∞–∑–Ω—ã–º isMetricsInCols
  if (isMetricsInCols) {
    uniqueCols.push(metrics)
  }
  return uniqueCols
}

/*
  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ null –∏–ª–∏ undefined
*/
export const renderValue = (value) => {
  return value || value === 0 ? value : '\u00A0' // =nbsp
}

/*
  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ span –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
*/
export const getDimSpan = (arr, level, type, isSubtotalOn, value) => {
  
  // if (level === 0 && isSubtotalOn) {
  //   console.log("üöÄ ~ level:", level)
  //   console.log("üöÄ ~ arr:", arr)
  //   console.log("üöÄ ~ remainder:", arr.map(el => el.filter(item => item !== 'subtotal')).slice(level+1))
  // }


  let remainder = arr.slice(level+1) // –≤—Å–µ —á—Ç–æ —Å–ø—Ä–∞–≤–∞
  if (!remainder) {
    return 1
  } else {
    let result = 0

    // if (isSubtotalOn) {
    //   const remainderWithoutSubtotal = arr.map(el => el.filter(item => item !== 'subtotal')).slice(level+1)
    //   const resultWithoutSubtotal = remainderWithoutSubtotal.reduce((acc, el) => {return acc*el.length}, 1)
    //   result = 
    //   // —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Å–∞–±—Ç–æ—Ç–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ + —Å–∞–±—Ç–æ—Ç–∞–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞
    //     resultWithoutSubtotal + 1 + 
    //   // –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏ –Ω–µ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ, —Ç–æ —Å–∞–±—Ç–æ—Ç–∞–ª –Ω–∞ –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞
    //     level < arr.length-2 ? 1 + 2

    // } else {
      result = remainder.reduce((acc, el) => {return acc*el.length}, 1)
  
      // –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∞–±—Ç–æ—Ç–∞–ª—ã
      // if (arr.some(el => el.includes('subtotal')) && isSubtotalOn) {
      //   if (type === 'rows') {
      //     // –Ω—É–∂–Ω–æ span —É–º–µ–Ω—å—à–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
      //     result
      //   }
      // }
    // }

    return result
  }
}

export const getDimSpanSubtotalRow = (arr, level) => {
  return arr[arr.length-1].length
}

/*
  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫/—Å—Ç–æ–ª–±—Ü–æ–≤
*/
export const getMultiplicators = (ar) => {
  const lenArr = ar.map(el => el.length)
  const result = []

  for (let i = 0; i < lenArr.length; i++) {
    if (i === lenArr.length-1) {
      result.push(1)
    } else {
      let tempval = 1
      for (let j = i+1; j < lenArr.length; j++) {
        tempval *= lenArr[j] // 1*2*2
      }
      result.push(tempval)
    }
  }

  return result
}

/*
  –ü–æ–∏—Å–∫ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ –≤ –º–∞—Å—Å–∏–≤–µ
*/
export const findSubArray = (arr, subarr, fromIndex) => {
  var i = fromIndex >>> 0,
      subarrLength = subarr.length,
      l = arr.length + 1 - subarrLength;

  loop: for (; i<l; i++) {
    for (var j=0; j<subarrLength; j++)
      if (arr[i+j] !== subarr[j]) continue loop;
    return i;
  }
  return -1;
}

/*
  –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏–∑ formData
*/
export const collectMetrics = (formDataMetrics, type) => {
  if (type === 'simple') {
    return formDataMetrics.map((metric) => {
      if (typeof metric === 'string') {
        return metric
      }
      if (metric.expressionType === 'SIMPLE') {
        if (metric.column) {
          return `${metric.aggregate}(${metric.column.column_name})`
        }
      }
      if (metric.expressionType === 'SQL') {
        return metric.label
      }
    })
  }
  if (type === 'def') {
    return formDataMetrics.map((metric) => {
      if (typeof metric === 'string') {
        return metric
      }
      return metric.label
    })
  }
  if (type === 'aggs') {
    return Array.from(new Set(formDataMetrics.map((metric) => {
      if (metric.expressionType === 'SIMPLE') {
        return metric.aggregate
      }
    })))
  }
  if (type === 'fields') {
    return Array.from(new Set(formDataMetrics.map((metric) => {
      if (metric.expressionType === 'SIMPLE') {
        return metric.column.column_name
      }
    })))
  }
}


/*
  –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Å–∞–±—Ç–æ—Ç–∞–ª–æ–≤
*/
export const getSubtotalsDims = (dims) => {
  /*
    –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ dims[i] (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∏) - —Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–±—Ç–æ—Ç–∞–ª–æ–≤
    –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Å 
      groupbyRows = dims[i][0]
      groupbyRows = [dims[i][0], dims[i][1]]
      groupbyRows = [dims[i][0], dims[i][1], dims[i][2]]
    –∏ —Ç–¥
    –ü—Ä–∏–º–µ—Ä: 
      –ù—É–∂–Ω—ã —Å–∞–±—Ç–æ—Ç–∞–ª—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º dims[1] = ['first_time_dev', 'developer_type']
      –¢–æ–≥–¥–∞, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞:
        1 - —Å groupbyRows = ['first_time_dev']
        2 - —Å groupbyRows = ['first_time_dev', 'developer_type']
    
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç ['first_time_dev', 'developer_type'] –Ω–∞
    ['first_time_dev'] –∏ ['first_time_dev', 'developer_type']
  */
  return dims.map((el, i) => {
    return dims.slice(0, i+1)
  })
}
